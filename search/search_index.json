{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"express-toolkit","title":"express-toolkit"},{"location":"#express-toolkit","text":"","title":"express-toolkit"},{"location":"express-mongoose-acl/","text":"express-mongoose-acl express-mongoose-acl exposes REST API endpoints corresponding to mongoose data models in Express routes. It builds the backend database security layer by decorating mongoose queries, which enables dynamic frontend mongoose-like query options. Installation $ npm install express-mongoose-acl $ yarn add express-mongoose-acl Usage const macl = require('express-mongoose-acl').default; const express = require('express'); const router = express.Router(); const userRouter = macl.createRouter('User', { baseUrl: null }); userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: 'isAdmin' }, role: { list: 'isAdmin', read: true, update: 'edit.role', create: 'isAdmin' }, public: { list: true, read: true, update: 'edit.public', create: 'isAdmin' }, statusHistory: { list: (permissions) => { return false; }, read: (permissions) => { return permissions.isAdmin; }, update: (permissions, modelPermissions) => { return modelPermissions['edit.statusHistory']; }, create: (permissions) => { return 'isAdmin'; }, }, }); userRouter.docPermissions(function (doc, permissions) { const isMe = String(doc._id) === String(permissions.userId); const permissions = { 'edit.name': permissions.isAdmin || isMe, 'edit.role': permissions.isAdmin, 'edit.public': permissions.isAdmin, 'edit.statusHistory': permissions.isAdmin, }; return permissions; }); userRouter.baseQuery({ list: function (permissions) { if (permissions.isAdmin) return {}; return { $or: [{ _id: permissions.userId }, { public: true }] }; }, read: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, update: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, delete: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, }); userRouter.prepare({ create: function (docObject, permissions, context) { const { originalData } = context; // add create prepare function return docObject; }, update: function (docObject, permissions, context) { const { originalDoc, originalData, currentDoc } = context; // add update prepare function return docObject; }, }); userRouter.transform(function (doc, permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths } = context; // add transform function return doc; }); userRouter.decorate({ list: function (docObject, permissions, context) { const { modelPermissions } = context; // add list decorator function return docObject; }, read: function (docObject, permissions, context) { const { modelPermissions } = context; // add read decorator function return docObject; }, create: function (docObject, permissions, context) { const { originalData, preparedData, modelPermissions } = context; // add create decorator function return docObject; }, update: function (docObject, permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths, modelPermissions } = context; // add update decorator function return docObject; }, }); userRouter.decorateAll(function (docObjects, permissions) { // add decorator-all function return docObjects; }); userRouter.routeGuard({ list: true, read: true, update: true, delete: 'isAdmin', create: 'isAdmin', }); userRouter.identifier(function (id) { return { name: id }; }); router.use('/api/users', userRouter.routes); Model Router Options Router options can be set passed to the instance constructor or to the each setter methods. baseUrl identifier permissionSchema routeGuard baseQuery prepare transform decorate decorateAll docPermissions MIT Licensed","title":"express-mongoose-acl"},{"location":"express-mongoose-acl/#express-mongoose-acl","text":"express-mongoose-acl exposes REST API endpoints corresponding to mongoose data models in Express routes. It builds the backend database security layer by decorating mongoose queries, which enables dynamic frontend mongoose-like query options.","title":"express-mongoose-acl"},{"location":"express-mongoose-acl/#installation","text":"$ npm install express-mongoose-acl $ yarn add express-mongoose-acl","title":"Installation"},{"location":"express-mongoose-acl/#usage","text":"const macl = require('express-mongoose-acl').default; const express = require('express'); const router = express.Router(); const userRouter = macl.createRouter('User', { baseUrl: null }); userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: 'isAdmin' }, role: { list: 'isAdmin', read: true, update: 'edit.role', create: 'isAdmin' }, public: { list: true, read: true, update: 'edit.public', create: 'isAdmin' }, statusHistory: { list: (permissions) => { return false; }, read: (permissions) => { return permissions.isAdmin; }, update: (permissions, modelPermissions) => { return modelPermissions['edit.statusHistory']; }, create: (permissions) => { return 'isAdmin'; }, }, }); userRouter.docPermissions(function (doc, permissions) { const isMe = String(doc._id) === String(permissions.userId); const permissions = { 'edit.name': permissions.isAdmin || isMe, 'edit.role': permissions.isAdmin, 'edit.public': permissions.isAdmin, 'edit.statusHistory': permissions.isAdmin, }; return permissions; }); userRouter.baseQuery({ list: function (permissions) { if (permissions.isAdmin) return {}; return { $or: [{ _id: permissions.userId }, { public: true }] }; }, read: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, update: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, delete: function (permissions) { if (permissions.isAdmin) return {}; return { _id: permissions.userId }; }, }); userRouter.prepare({ create: function (docObject, permissions, context) { const { originalData } = context; // add create prepare function return docObject; }, update: function (docObject, permissions, context) { const { originalDoc, originalData, currentDoc } = context; // add update prepare function return docObject; }, }); userRouter.transform(function (doc, permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths } = context; // add transform function return doc; }); userRouter.decorate({ list: function (docObject, permissions, context) { const { modelPermissions } = context; // add list decorator function return docObject; }, read: function (docObject, permissions, context) { const { modelPermissions } = context; // add read decorator function return docObject; }, create: function (docObject, permissions, context) { const { originalData, preparedData, modelPermissions } = context; // add create decorator function return docObject; }, update: function (docObject, permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths, modelPermissions } = context; // add update decorator function return docObject; }, }); userRouter.decorateAll(function (docObjects, permissions) { // add decorator-all function return docObjects; }); userRouter.routeGuard({ list: true, read: true, update: true, delete: 'isAdmin', create: 'isAdmin', }); userRouter.identifier(function (id) { return { name: id }; }); router.use('/api/users', userRouter.routes);","title":"Usage"},{"location":"express-mongoose-acl/#model-router-options","text":"Router options can be set passed to the instance constructor or to the each setter methods.","title":"Model Router Options"},{"location":"express-mongoose-acl/#baseurl","text":"","title":"baseUrl"},{"location":"express-mongoose-acl/#identifier","text":"","title":"identifier"},{"location":"express-mongoose-acl/#permissionschema","text":"","title":"permissionSchema"},{"location":"express-mongoose-acl/#routeguard","text":"","title":"routeGuard"},{"location":"express-mongoose-acl/#basequery","text":"","title":"baseQuery"},{"location":"express-mongoose-acl/#prepare","text":"","title":"prepare"},{"location":"express-mongoose-acl/#transform","text":"","title":"transform"},{"location":"express-mongoose-acl/#decorate","text":"","title":"decorate"},{"location":"express-mongoose-acl/#decorateall","text":"","title":"decorateAll"},{"location":"express-mongoose-acl/#docpermissions","text":"","title":"docPermissions"},{"location":"express-mongoose-acl/#mit-licensed","text":"","title":"MIT Licensed"}]}